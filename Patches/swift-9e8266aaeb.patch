diff --git Sources/SwiftGObject.swift b/Sources/SwiftGObject.swift
index f15cad0..1d4ce38 100644
--- Sources/SwiftGObject.swift
+++ Sources/SwiftGObject.swift
@@ -28,11 +28,11 @@ typealias SignalHandlerClosureHolder = ClosureHolder<Void,Void>
 public extension ObjectProtocol {
     /// Connection helper function
     private func _connect(signal name: UnsafePointer<gchar>, flags: ConnectFlags, data: SignalHandlerClosureHolder, handler: @convention(c) (gpointer, gpointer) -> Void) -> CUnsignedLong {
-        let opaqueHolder = OpaquePointer(bitPattern: Unmanaged.passRetained(data))
+        let opaqueHolder = OpaquePointer(Unmanaged.passRetained(data).toOpaque())
         let callback = unsafeBitCast(handler, to: Callback.self)
         let rv = signalConnectData(detailedSignal: name, cHandler: callback, data: opaqueHolder, destroyData: {
             if let swift = OpaquePointer($0) {
-                let holder = Unmanaged<SignalHandlerClosureHolder>.fromOpaque(swift)
+                let holder = Unmanaged<SignalHandlerClosureHolder>.fromOpaque(UnsafePointer<Void>(swift))
                 holder.release()
             }
             let _ = $1
@@ -46,7 +46,7 @@ public extension ObjectProtocol {
     public func connect(signal name: UnsafePointer<gchar>, flags f: ConnectFlags = ConnectFlags(0), handler: SignalHandler) -> CUnsignedLong {
         let rv = _connect(signal: name, flags: f, data: ClosureHolder(handler)) {
             let ptr = OpaquePointer($1)
-            let holder = Unmanaged<SignalHandlerClosureHolder>.fromOpaque(ptr).takeUnretainedValue()
+            let holder = Unmanaged<SignalHandlerClosureHolder>.fromOpaque(UnsafePointer<Void>(ptr)).takeUnretainedValue()
             holder.call()
         }
         return rv
